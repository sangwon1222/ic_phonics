import java.text.SimpleDateFormat

def noti(title, color, msg = "") {
    def nowTime = new Date().getTime() / 1000
    sh """curl -X POST http://133.186.134.154:1058/services/T3SQN5UUA/BEYJF79JQ/yTwSGAJgdWZPT5CQ7rUgoApb \
-H 'Content-Type: text/json; charset=utf-8' \
-d @- << EOF
{ "attachments": [{
    "fallback": "${title}",
    "color": "${color}",
    "author_name": "PROD JENKINS",
    "author_link": "https://dist.home-learn.com/jenkins2/",
    "title": ":hammer_and_wrench: ${title} : 빌드번호 ${currentBuild.number}",
    "title_link": "https://dist.home-learn.com/jenkins2/job/prod_littleengnuri_spa/${currentBuild.number}/console",
    "text" : "${msg}",
    "ts" : ${nowTime}
}]}
EOF
"""
}

def changeLogs() {
    def dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm")
    return currentBuild.changeSets.collectMany { it.items }
            .collect { entry -> "${entry.author} | ${entry.msg} | ${dateFormat.format(new Date(entry.timestamp as long))}" }.join("\\n")
}

APPNAME = "운영 littleengnuri SPA"
PROD_WEBS = ["172.16.10.86", "172.16.10.87", "172.16.10.88"]
APP_PATH = "/data/web/ishome/apps"
ROTATE_SHELL = "littleengnuri-rotate-prod.sh"

pipeline {
    agent any
    tools {
        nodejs "nodejs8.12.0"
    }
    stages {
        stage('Pre Actions') {
            steps {
                noti("${APPNAME} 배포 시작", "#17a2b8")
            }
        }
        stage('Checkout') {
            steps {
                checkout([$class                           : 'GitSCM',
                          branches                         : [[name: '*/master']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions                       : [],
                          submoduleCfg                     : [],
                          userRemoteConfigs                : [[credentialsId: '425a2f3f-bf18-4d34-a085-110ac4c3e082',
                                                               url          : 'http://gitlab.home-learn.com:8824/frontend/ice-app-littleengnuri.git']]
                ])
            }
        }
        stage('Package') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }
        stage('Deploy') {
            steps {
                deployToWebs()
            }
        }
    }
    post {
        always {
            echo changeLogs()
        }
        success {
            noti("${APPNAME} 배포 완료", "#36a64f", changeLogs())
        }
        unstable {
            noti("${APPNAME} 배포 실패(unstable)", "#ffc107", changeLogs())
        }
        failure {
            noti("${APPNAME} 배포 실패(failure)", "#dc3545", changeLogs())
        }
        aborted {
            noti("${APPNAME} 배포 실패(aborted)", "#dc3545", changeLogs())
        }
    }
}

def deployToWebs() {
    PROD_WEBS.each { prodWeb ->
        sh "scp -r ./dist ${prodWeb}:${APP_PATH}/littleengnuri.${currentBuild.number}"
        sh "scp ./deploy/${ROTATE_SHELL} ${prodWeb}:${APP_PATH}/${ROTATE_SHELL}"
        sh "ssh ${prodWeb} \"cd ${APP_PATH} && sed -i 's/\015//g' ${ROTATE_SHELL} && chmod 755 ${ROTATE_SHELL}\""
        sh "ssh ${prodWeb} \"cd ${APP_PATH} && env NEXT_VER_PATH=littleengnuri.${currentBuild.number} ./${ROTATE_SHELL}\""
    }
}